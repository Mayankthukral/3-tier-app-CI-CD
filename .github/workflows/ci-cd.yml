name: 3-tier-app-CI/CD

on:
  push:
    branches:
      - workflow_dispatch
      - master
      - testing

permissions:
  id-token: write
  contents: write
  security-events: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.1

      - name: Setup Node.js environment
        uses: actions/setup-node@v4.0.2
        with:
          node-version: "20"

      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install frontend Dependencies
        run: |
          cd task-manager-frontend  
          ls | cat simplefile.txt
          npm install

      - name: Install backend Dependencies
        run: |
          cd task-manager-backend 
          ls | cat simplefile.txt
          npm install

      - name: Run frontend unit Tests
        run: |
          cd task-manager-frontend 
            echo "MONGODB_URL=${{ secrets.MONGODB_URL }}" > .env 
            npm test

      - name: Run frontend unit Tests
        run: |
          cd task-manager-backend
            echo "MONGODB_URL=${{ secrets.MONGODB_URL }}" > .env 
            npm test

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.CUSTOM_GITHUBTOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: -Dsonar.organization=${{ secrets.SONARORGANIZATION}}
            -Dsonar.projectKey=${{ secrets.SONARPROJECT}}
            -Dsonar.sources=task-manager-backend,task-manager-frontend

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./task-manager-frontend
          push: true
          tags: mayank7833/frontend:latest

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./task-manager-backend
          push: true
          tags: mayank7833/backend:latest

      - name: Install and run Trivy on frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "mayank7833/frontend:latest"
          format: "sarif"
          output: "trivy-results-frontend.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: |
            trivy-results-frontend.sarif

      - name: "Az CLI login"
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
        env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install and set up kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

  testing_env:
    if: github.ref == 'refs/heads/testing'
    runs-on: ubuntu-latest
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.2
        with:
          terraform_version: latest
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN_ID_testingcluster }}

      - name: Terraform Init
        id: init
        run: terraform init -chdir=testing/

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Terraform Output
        run: terraform output

      - name: Get kubeconfig from Azure for testing cluster
        run: |
          az aks get-credentials --resource-group my_resource_group_testing --name todoappcluster_testing

      - name: Install and set up kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Install Nginx Ingress Controller
        run: |
          cd kubernetes_manifests
          kubectl create namespace testingnamespace || true
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx || true
          # Install the Nginx Ingress controller with specified configurations
          helm install nginx-ingress ingress-nginx/ingress-nginx \ || true
            --namespace testingnamespace \ ||true
            --set controller.replicaCount=2 \ || true
            --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \ || true
            --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux || true
          set +x
          echo "
          apiVersion: v1
          kind: Secret
          metadata:
            name: mongodb-secret
          type: Opaque
          data:
            mongo-uri: $MONGO_BASE64
          " | kubectl apply -f - -n testingnamespace || true
          set -x

      - name: Apply Kubernetes deployment
        if: github.ref == 'refs/heads/testing'
        run: |
          cd kubernetes_manifests
          kubectl apply -f backend.yaml --namespace testingnamespace || true
          kubectl apply -f frontend.yaml --namespace testingnamespace || true
          kubectl apply -f ingress.yaml --namespace testingnamespace || true

      - name: Check if Prometheus is already installed in testingnamespace
        if: github.ref == 'refs/heads/testing'
        id: check_prometheus_in_testingnamespace
        run: |
          if kubectl get deployment prometheus-server -n testingnamespace &>/dev/null; then
            echo "Prometheus is already installed."
            echo "::set-output name=prometheus_installed::true"
          else
            echo "Prometheus is not installed."
            echo "::set-output name=prometheus_installed::false"
          fi

      - name: Add Prometheus Helm repository and install if not already installed
        if: github.ref == 'refs/heads/testing' && steps.check_prometheus_in_testingnamespace.outputs.prometheus_installed != 'true'
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts -n testingnamespace
          helm repo update -n testingnamespace
          helm install prometheus prometheus-community/prometheus -n testingnamespace 
          kubectl expose service prometheus-server --type=LoadBalancer --target-port=9090 --name=prometheus-server-ext -n testingnamespace || testingnamespace

      - name: Check if Grafana is already installed in testingnamespace
        if: github.ref == 'refs/heads/testing'
        id: check_grafana
        run: |
          if kubectl get deployment grafana -n testingnamespace &>/dev/null; then
            echo "Grafana is already installed."
            echo "::set-output name=grafana_installed::true"
          else
            echo "Grafana is not installed."
            echo "::set-output name=grafana_installed::false"
          fi

      - name: Add Grafana Helm repository and install if not already installed in testingnamespace
        if: github.ref == 'refs/heads/testing' && steps.check_grafana.outputs.grafana_installed != 'true'
        run: |
          helm repo add grafana https://grafana.github.io/helm-charts -n testingnamespace 
          helm repo update -n testingnamespace
          helm install grafana grafana/grafana -n testingnamespace
          kubectl expose service grafana --type=LoadBalancer --target-port=3000 --name=grafana-ext --namespace=testingnamespace || true

      - name: Store Grafana admin password as secret for testingnamespace
        if: github.ref == 'refs/heads/testing'
        run: echo "${{ steps.get_password_testingnamespace.outputs.password_testingnamespace }}" | az keyvault secret set --vault-name todovaultformyapplatest --name grafana-admin-password-testing --value - || true

      - name: Update Grafana deployment for testingnamespace
        if: github.ref == 'refs/heads/testing'
        run: |
          cd kubernetes_manifests
          PASSWORD=$(echo "${{ steps.get_password_testingnamespace.outputs.password_testingnamespace }}" | base64)
          sed -i "s|{{GRAFANA_PASSWORD}}|${PASSWORD}|g" grafana-service-testing.yaml || true
          kubectl apply -f grafana-service-testing.yaml -n testingnamespace || true

      - name: Get Ingress IP of testing
        if: github.ref == 'refs/heads/testing'
        run: |
          echo "Waiting for Ingress to be ready..."
          sleep 240 # Wait for 4 minutes
          echo "Fetching Ingress details..."
          kubectl get ingress -n testingnamespace
          kubectl get svc -n testingnamespace

  production_env:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.2
        with:
          terraform_version: latest
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN_ID_productioncluster }}

      - name: Terraform Init
        id: init
        run: terraform init -chdir=production/

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Terraform Output
        run: terraform output # Correct any specific issues here

      - name: Get kubeconfig from Azure for production cluster
        run: |
          az aks get-credentials --resource-group <your_resource_group_name> --name todoappcluster_production

      - name: Install Nginx Ingress Controller
        if: github.ref == 'refs/heads/master'
        env:
          MONGO_BASE64: ${{ secrets.MONGO_BASE64 }}
        run: |
          cd kubernetes_manifests
          kubectl create namespace productionnamespace || true
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx || true
          helm install nginx-ingress ingress-nginx/ingress-nginx \
            --namespace productionnamespace \
            --set controller.replicaCount=2 \
            --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
            --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux || true
          set +x
          echo "
          apiVersion: v1
          kind: Secret
          metadata:
            name: mongodb-secret
          type: Opaque
          data:
            mongo-uri: $MONGO_BASE64
          " | kubectl apply -f - -n productionnamespace || true
          set -x

      - name: Apply Kubernetes deployment
        if: github.ref == 'refs/heads/master'
        run: |
          cd kubernetes_manifests
          kubectl apply -f backend.yaml --namespace productionnamespace  || true
          kubectl apply -f frontend.yaml --namespace productionnamespace  || true
          kubectl apply -f ingress.yaml --namespace productionnamespace  || true

      - name: Check if Prometheus is already installed in production
        if: github.ref == 'refs/heads/master'
        id: check_prometheus_production
        run: |
          if kubectl get deployment prometheus-server -n productionnamespace  &>/dev/null; then
            echo "Prometheus is already installed."
            echo "::set-output name=prometheus_installed::true"
          else
            echo "Prometheus is not installed."
            echo "::set-output name=prometheus_installed::false"
          fi

      - name: Add Prometheus Helm repository and install if not already installed in production
        if: github.ref == 'refs/heads/master' && steps.check_prometheus_production.outputs.prometheus_installed != 'true'
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts -n productionnamespace
          helm repo update -n productionnamespace
          helm install prometheus prometheus-community/prometheus -n productionnamespace
          kubectl expose service prometheus-server --type=LoadBalancer --target-port=9090 --name=prometheus-server-ext -n productionnamespace

      - name: Check if Grafana is already installed in production
        if: github.ref == 'refs/heads/master'
        id: check_grafana_production
        run: |
          if kubectl get deployment grafana -n productionnamespace &>/dev/null; then
            echo "Grafana is already installed."
            echo "::set-output name=grafana_installed::true"
          else
            echo "Grafana is not installed."
            echo "::set-output name=grafana_installed::false"
          fi

      - name: Add Grafana Helm repository and install if not already installed in production
        if: github.ref == 'refs/heads/master' && steps.check_grafana_production.outputs.grafana_installed != 'true'
        run: |
          helm repo add grafana https://grafana.github.io/helm-charts -n production
          helm repo update -n productionnamespace
          helm install grafana grafana/grafana -n productionnamespace
          kubectl expose service grafana --type=LoadBalancer --target-port=3000 --name=grafana-ext --namespace=productionnamespace || true

      - name: Get Grafana admin password in production
        if: github.ref == 'refs/heads/master'
        id: get_password_production
        run: echo "::set-output name=password_production::$(kubectl get secret -n productionnamespace -o jsonpath="{.data.admin-password}" | base64 --decode)"

      - name: Update Grafana deployment for production
        if: github.ref == 'refs/heads/master'
        run: |
          cd kubernetes_manifests 
          PASSWORD=$(echo "${{ steps.get_password_production.outputs.password_production }}" | base64)
          sed -i "s|{{GRAFANA_PASSWORD}}|${PASSWORD}|g" grafana-service-production.yaml || true
          kubectl apply -f grafana-service-production.yaml -n productionnamespace || true
          kubectl get svc

      - name: Get Ingress IP of production
        if: github.ref == 'refs/heads/master'
        run: |
          echo "Waiting for Ingress to be ready..."
          sleep 240 # Wait for 4 minutes
          echo "Fetching Ingress details..."
          kubectl get ingress -n productionnamespace
          kubectl get svc -n productionnamespace

      # Cleanup: Remove the password from the output
      - name: Cleanup password from logs
        run: echo "::remove-output name=password"
